// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eve_launcher/application.proto

#ifndef PROTOBUF_INCLUDED_eve_5flauncher_2fapplication_2eproto
#define PROTOBUF_INCLUDED_eve_5flauncher_2fapplication_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_eve_5flauncher_2fapplication_2eproto 

namespace protobuf_eve_5flauncher_2fapplication_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_eve_5flauncher_2fapplication_2eproto
namespace eve_launcher {
namespace application {
class Application;
class ApplicationDefaultTypeInternal;
extern ApplicationDefaultTypeInternal _Application_default_instance_;
class EventMetadata;
class EventMetadataDefaultTypeInternal;
extern EventMetadataDefaultTypeInternal _EventMetadata_default_instance_;
}  // namespace application
}  // namespace eve_launcher
namespace google {
namespace protobuf {
template<> ::eve_launcher::application::Application* Arena::CreateMaybeMessage<::eve_launcher::application::Application>(Arena*);
template<> ::eve_launcher::application::EventMetadata* Arena::CreateMaybeMessage<::eve_launcher::application::EventMetadata>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace eve_launcher {
namespace application {

enum Application_BuildType {
  Application_BuildType_BUILDTYPE_UNSPECIFIED = 0,
  Application_BuildType_BUILDTYPE_RELEASE = 1,
  Application_BuildType_BUILDTYPE_BETA = 2,
  Application_BuildType_BUILDTYPE_DEV = 3,
  Application_BuildType_Application_BuildType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Application_BuildType_Application_BuildType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Application_BuildType_IsValid(int value);
const Application_BuildType Application_BuildType_BuildType_MIN = Application_BuildType_BUILDTYPE_UNSPECIFIED;
const Application_BuildType Application_BuildType_BuildType_MAX = Application_BuildType_BUILDTYPE_DEV;
const int Application_BuildType_BuildType_ARRAYSIZE = Application_BuildType_BuildType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Application_BuildType_descriptor();
inline const ::std::string& Application_BuildType_Name(Application_BuildType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Application_BuildType_descriptor(), value);
}
inline bool Application_BuildType_Parse(
    const ::std::string& name, Application_BuildType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Application_BuildType>(
    Application_BuildType_descriptor(), name, value);
}
enum Application_Region {
  Application_Region_REGION_UNSPECIFIED = 0,
  Application_Region_REGION_WORLD = 1,
  Application_Region_REGION_CHINA = 2,
  Application_Region_Application_Region_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Application_Region_Application_Region_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Application_Region_IsValid(int value);
const Application_Region Application_Region_Region_MIN = Application_Region_REGION_UNSPECIFIED;
const Application_Region Application_Region_Region_MAX = Application_Region_REGION_CHINA;
const int Application_Region_Region_ARRAYSIZE = Application_Region_Region_MAX + 1;

const ::google::protobuf::EnumDescriptor* Application_Region_descriptor();
inline const ::std::string& Application_Region_Name(Application_Region value) {
  return ::google::protobuf::internal::NameOfEnum(
    Application_Region_descriptor(), value);
}
inline bool Application_Region_Parse(
    const ::std::string& name, Application_Region* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Application_Region>(
    Application_Region_descriptor(), name, value);
}
// ===================================================================

class EventMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eve_launcher.application.EventMetadata) */ {
 public:
  EventMetadata();
  virtual ~EventMetadata();

  EventMetadata(const EventMetadata& from);

  inline EventMetadata& operator=(const EventMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventMetadata(EventMetadata&& from) noexcept
    : EventMetadata() {
    *this = ::std::move(from);
  }

  inline EventMetadata& operator=(EventMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventMetadata* internal_default_instance() {
    return reinterpret_cast<const EventMetadata*>(
               &_EventMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EventMetadata* other);
  friend void swap(EventMetadata& a, EventMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventMetadata* New() const final {
    return CreateMaybeMessage<EventMetadata>(NULL);
  }

  EventMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventMetadata& from);
  void MergeFrom(const EventMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes md5_session = 1;
  void clear_md5_session();
  static const int kMd5SessionFieldNumber = 1;
  const ::std::string& md5_session() const;
  void set_md5_session(const ::std::string& value);
  #if LANG_CXX11
  void set_md5_session(::std::string&& value);
  #endif
  void set_md5_session(const char* value);
  void set_md5_session(const void* value, size_t size);
  ::std::string* mutable_md5_session();
  ::std::string* release_md5_session();
  void set_allocated_md5_session(::std::string* md5_session);

  // bytes operating_system_uuid = 3;
  void clear_operating_system_uuid();
  static const int kOperatingSystemUuidFieldNumber = 3;
  const ::std::string& operating_system_uuid() const;
  void set_operating_system_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_operating_system_uuid(::std::string&& value);
  #endif
  void set_operating_system_uuid(const char* value);
  void set_operating_system_uuid(const void* value, size_t size);
  ::std::string* mutable_operating_system_uuid();
  ::std::string* release_operating_system_uuid();
  void set_allocated_operating_system_uuid(::std::string* operating_system_uuid);

  // .eve_launcher.application.Application application = 2;
  bool has_application() const;
  void clear_application();
  static const int kApplicationFieldNumber = 2;
  private:
  const ::eve_launcher::application::Application& _internal_application() const;
  public:
  const ::eve_launcher::application::Application& application() const;
  ::eve_launcher::application::Application* release_application();
  ::eve_launcher::application::Application* mutable_application();
  void set_allocated_application(::eve_launcher::application::Application* application);

  // @@protoc_insertion_point(class_scope:eve_launcher.application.EventMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr md5_session_;
  ::google::protobuf::internal::ArenaStringPtr operating_system_uuid_;
  ::eve_launcher::application::Application* application_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_eve_5flauncher_2fapplication_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Application : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eve_launcher.application.Application) */ {
 public:
  Application();
  virtual ~Application();

  Application(const Application& from);

  inline Application& operator=(const Application& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Application(Application&& from) noexcept
    : Application() {
    *this = ::std::move(from);
  }

  inline Application& operator=(Application&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Application& default_instance();

  enum ProviderCase {
    kNoInstallerProvider = 4,
    kInstallerProvider = 5,
    PROVIDER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Application* internal_default_instance() {
    return reinterpret_cast<const Application*>(
               &_Application_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Application* other);
  friend void swap(Application& a, Application& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Application* New() const final {
    return CreateMaybeMessage<Application>(NULL);
  }

  Application* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Application>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Application& from);
  void MergeFrom(const Application& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Application* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Application_BuildType BuildType;
  static const BuildType BUILDTYPE_UNSPECIFIED =
    Application_BuildType_BUILDTYPE_UNSPECIFIED;
  static const BuildType BUILDTYPE_RELEASE =
    Application_BuildType_BUILDTYPE_RELEASE;
  static const BuildType BUILDTYPE_BETA =
    Application_BuildType_BUILDTYPE_BETA;
  static const BuildType BUILDTYPE_DEV =
    Application_BuildType_BUILDTYPE_DEV;
  static inline bool BuildType_IsValid(int value) {
    return Application_BuildType_IsValid(value);
  }
  static const BuildType BuildType_MIN =
    Application_BuildType_BuildType_MIN;
  static const BuildType BuildType_MAX =
    Application_BuildType_BuildType_MAX;
  static const int BuildType_ARRAYSIZE =
    Application_BuildType_BuildType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BuildType_descriptor() {
    return Application_BuildType_descriptor();
  }
  static inline const ::std::string& BuildType_Name(BuildType value) {
    return Application_BuildType_Name(value);
  }
  static inline bool BuildType_Parse(const ::std::string& name,
      BuildType* value) {
    return Application_BuildType_Parse(name, value);
  }

  typedef Application_Region Region;
  static const Region REGION_UNSPECIFIED =
    Application_Region_REGION_UNSPECIFIED;
  static const Region REGION_WORLD =
    Application_Region_REGION_WORLD;
  static const Region REGION_CHINA =
    Application_Region_REGION_CHINA;
  static inline bool Region_IsValid(int value) {
    return Application_Region_IsValid(value);
  }
  static const Region Region_MIN =
    Application_Region_Region_MIN;
  static const Region Region_MAX =
    Application_Region_Region_MAX;
  static const int Region_ARRAYSIZE =
    Application_Region_Region_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Region_descriptor() {
    return Application_Region_descriptor();
  }
  static inline const ::std::string& Region_Name(Region value) {
    return Application_Region_Name(value);
  }
  static inline bool Region_Parse(const ::std::string& name,
      Region* value) {
    return Application_Region_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // .eve_launcher.application.Application.BuildType build_type = 2;
  void clear_build_type();
  static const int kBuildTypeFieldNumber = 2;
  ::eve_launcher::application::Application_BuildType build_type() const;
  void set_build_type(::eve_launcher::application::Application_BuildType value);

  // .eve_launcher.application.Application.Region region = 3;
  void clear_region();
  static const int kRegionFieldNumber = 3;
  ::eve_launcher::application::Application_Region region() const;
  void set_region(::eve_launcher::application::Application_Region value);

  // bool no_installer_provider = 4;
  private:
  bool has_no_installer_provider() const;
  public:
  void clear_no_installer_provider();
  static const int kNoInstallerProviderFieldNumber = 4;
  bool no_installer_provider() const;
  void set_no_installer_provider(bool value);

  // string installer_provider = 5;
  private:
  bool has_installer_provider() const;
  public:
  void clear_installer_provider();
  static const int kInstallerProviderFieldNumber = 5;
  const ::std::string& installer_provider() const;
  void set_installer_provider(const ::std::string& value);
  #if LANG_CXX11
  void set_installer_provider(::std::string&& value);
  #endif
  void set_installer_provider(const char* value);
  void set_installer_provider(const char* value, size_t size);
  ::std::string* mutable_installer_provider();
  ::std::string* release_installer_provider();
  void set_allocated_installer_provider(::std::string* installer_provider);

  void clear_provider();
  ProviderCase provider_case() const;
  // @@protoc_insertion_point(class_scope:eve_launcher.application.Application)
 private:
  void set_has_no_installer_provider();
  void set_has_installer_provider();

  inline bool has_provider() const;
  inline void clear_has_provider();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  int build_type_;
  int region_;
  union ProviderUnion {
    ProviderUnion() {}
    bool no_installer_provider_;
    ::google::protobuf::internal::ArenaStringPtr installer_provider_;
  } provider_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_eve_5flauncher_2fapplication_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventMetadata

// bytes md5_session = 1;
inline void EventMetadata::clear_md5_session() {
  md5_session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventMetadata::md5_session() const {
  // @@protoc_insertion_point(field_get:eve_launcher.application.EventMetadata.md5_session)
  return md5_session_.GetNoArena();
}
inline void EventMetadata::set_md5_session(const ::std::string& value) {
  
  md5_session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eve_launcher.application.EventMetadata.md5_session)
}
#if LANG_CXX11
inline void EventMetadata::set_md5_session(::std::string&& value) {
  
  md5_session_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eve_launcher.application.EventMetadata.md5_session)
}
#endif
inline void EventMetadata::set_md5_session(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  md5_session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eve_launcher.application.EventMetadata.md5_session)
}
inline void EventMetadata::set_md5_session(const void* value, size_t size) {
  
  md5_session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eve_launcher.application.EventMetadata.md5_session)
}
inline ::std::string* EventMetadata::mutable_md5_session() {
  
  // @@protoc_insertion_point(field_mutable:eve_launcher.application.EventMetadata.md5_session)
  return md5_session_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventMetadata::release_md5_session() {
  // @@protoc_insertion_point(field_release:eve_launcher.application.EventMetadata.md5_session)
  
  return md5_session_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventMetadata::set_allocated_md5_session(::std::string* md5_session) {
  if (md5_session != NULL) {
    
  } else {
    
  }
  md5_session_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5_session);
  // @@protoc_insertion_point(field_set_allocated:eve_launcher.application.EventMetadata.md5_session)
}

// .eve_launcher.application.Application application = 2;
inline bool EventMetadata::has_application() const {
  return this != internal_default_instance() && application_ != NULL;
}
inline void EventMetadata::clear_application() {
  if (GetArenaNoVirtual() == NULL && application_ != NULL) {
    delete application_;
  }
  application_ = NULL;
}
inline const ::eve_launcher::application::Application& EventMetadata::_internal_application() const {
  return *application_;
}
inline const ::eve_launcher::application::Application& EventMetadata::application() const {
  const ::eve_launcher::application::Application* p = application_;
  // @@protoc_insertion_point(field_get:eve_launcher.application.EventMetadata.application)
  return p != NULL ? *p : *reinterpret_cast<const ::eve_launcher::application::Application*>(
      &::eve_launcher::application::_Application_default_instance_);
}
inline ::eve_launcher::application::Application* EventMetadata::release_application() {
  // @@protoc_insertion_point(field_release:eve_launcher.application.EventMetadata.application)
  
  ::eve_launcher::application::Application* temp = application_;
  application_ = NULL;
  return temp;
}
inline ::eve_launcher::application::Application* EventMetadata::mutable_application() {
  
  if (application_ == NULL) {
    auto* p = CreateMaybeMessage<::eve_launcher::application::Application>(GetArenaNoVirtual());
    application_ = p;
  }
  // @@protoc_insertion_point(field_mutable:eve_launcher.application.EventMetadata.application)
  return application_;
}
inline void EventMetadata::set_allocated_application(::eve_launcher::application::Application* application) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete application_;
  }
  if (application) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      application = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, application, submessage_arena);
    }
    
  } else {
    
  }
  application_ = application;
  // @@protoc_insertion_point(field_set_allocated:eve_launcher.application.EventMetadata.application)
}

// bytes operating_system_uuid = 3;
inline void EventMetadata::clear_operating_system_uuid() {
  operating_system_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventMetadata::operating_system_uuid() const {
  // @@protoc_insertion_point(field_get:eve_launcher.application.EventMetadata.operating_system_uuid)
  return operating_system_uuid_.GetNoArena();
}
inline void EventMetadata::set_operating_system_uuid(const ::std::string& value) {
  
  operating_system_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eve_launcher.application.EventMetadata.operating_system_uuid)
}
#if LANG_CXX11
inline void EventMetadata::set_operating_system_uuid(::std::string&& value) {
  
  operating_system_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eve_launcher.application.EventMetadata.operating_system_uuid)
}
#endif
inline void EventMetadata::set_operating_system_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operating_system_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eve_launcher.application.EventMetadata.operating_system_uuid)
}
inline void EventMetadata::set_operating_system_uuid(const void* value, size_t size) {
  
  operating_system_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eve_launcher.application.EventMetadata.operating_system_uuid)
}
inline ::std::string* EventMetadata::mutable_operating_system_uuid() {
  
  // @@protoc_insertion_point(field_mutable:eve_launcher.application.EventMetadata.operating_system_uuid)
  return operating_system_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventMetadata::release_operating_system_uuid() {
  // @@protoc_insertion_point(field_release:eve_launcher.application.EventMetadata.operating_system_uuid)
  
  return operating_system_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventMetadata::set_allocated_operating_system_uuid(::std::string* operating_system_uuid) {
  if (operating_system_uuid != NULL) {
    
  } else {
    
  }
  operating_system_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operating_system_uuid);
  // @@protoc_insertion_point(field_set_allocated:eve_launcher.application.EventMetadata.operating_system_uuid)
}

// -------------------------------------------------------------------

// Application

// string version = 1;
inline void Application::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Application::version() const {
  // @@protoc_insertion_point(field_get:eve_launcher.application.Application.version)
  return version_.GetNoArena();
}
inline void Application::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eve_launcher.application.Application.version)
}
#if LANG_CXX11
inline void Application::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eve_launcher.application.Application.version)
}
#endif
inline void Application::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eve_launcher.application.Application.version)
}
inline void Application::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eve_launcher.application.Application.version)
}
inline ::std::string* Application::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:eve_launcher.application.Application.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Application::release_version() {
  // @@protoc_insertion_point(field_release:eve_launcher.application.Application.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:eve_launcher.application.Application.version)
}

// .eve_launcher.application.Application.BuildType build_type = 2;
inline void Application::clear_build_type() {
  build_type_ = 0;
}
inline ::eve_launcher::application::Application_BuildType Application::build_type() const {
  // @@protoc_insertion_point(field_get:eve_launcher.application.Application.build_type)
  return static_cast< ::eve_launcher::application::Application_BuildType >(build_type_);
}
inline void Application::set_build_type(::eve_launcher::application::Application_BuildType value) {
  
  build_type_ = value;
  // @@protoc_insertion_point(field_set:eve_launcher.application.Application.build_type)
}

// .eve_launcher.application.Application.Region region = 3;
inline void Application::clear_region() {
  region_ = 0;
}
inline ::eve_launcher::application::Application_Region Application::region() const {
  // @@protoc_insertion_point(field_get:eve_launcher.application.Application.region)
  return static_cast< ::eve_launcher::application::Application_Region >(region_);
}
inline void Application::set_region(::eve_launcher::application::Application_Region value) {
  
  region_ = value;
  // @@protoc_insertion_point(field_set:eve_launcher.application.Application.region)
}

// bool no_installer_provider = 4;
inline bool Application::has_no_installer_provider() const {
  return provider_case() == kNoInstallerProvider;
}
inline void Application::set_has_no_installer_provider() {
  _oneof_case_[0] = kNoInstallerProvider;
}
inline void Application::clear_no_installer_provider() {
  if (has_no_installer_provider()) {
    provider_.no_installer_provider_ = false;
    clear_has_provider();
  }
}
inline bool Application::no_installer_provider() const {
  // @@protoc_insertion_point(field_get:eve_launcher.application.Application.no_installer_provider)
  if (has_no_installer_provider()) {
    return provider_.no_installer_provider_;
  }
  return false;
}
inline void Application::set_no_installer_provider(bool value) {
  if (!has_no_installer_provider()) {
    clear_provider();
    set_has_no_installer_provider();
  }
  provider_.no_installer_provider_ = value;
  // @@protoc_insertion_point(field_set:eve_launcher.application.Application.no_installer_provider)
}

// string installer_provider = 5;
inline bool Application::has_installer_provider() const {
  return provider_case() == kInstallerProvider;
}
inline void Application::set_has_installer_provider() {
  _oneof_case_[0] = kInstallerProvider;
}
inline void Application::clear_installer_provider() {
  if (has_installer_provider()) {
    provider_.installer_provider_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_provider();
  }
}
inline const ::std::string& Application::installer_provider() const {
  // @@protoc_insertion_point(field_get:eve_launcher.application.Application.installer_provider)
  if (has_installer_provider()) {
    return provider_.installer_provider_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Application::set_installer_provider(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:eve_launcher.application.Application.installer_provider)
  if (!has_installer_provider()) {
    clear_provider();
    set_has_installer_provider();
    provider_.installer_provider_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  provider_.installer_provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eve_launcher.application.Application.installer_provider)
}
#if LANG_CXX11
inline void Application::set_installer_provider(::std::string&& value) {
  // @@protoc_insertion_point(field_set:eve_launcher.application.Application.installer_provider)
  if (!has_installer_provider()) {
    clear_provider();
    set_has_installer_provider();
    provider_.installer_provider_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  provider_.installer_provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eve_launcher.application.Application.installer_provider)
}
#endif
inline void Application::set_installer_provider(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_installer_provider()) {
    clear_provider();
    set_has_installer_provider();
    provider_.installer_provider_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  provider_.installer_provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eve_launcher.application.Application.installer_provider)
}
inline void Application::set_installer_provider(const char* value, size_t size) {
  if (!has_installer_provider()) {
    clear_provider();
    set_has_installer_provider();
    provider_.installer_provider_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  provider_.installer_provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eve_launcher.application.Application.installer_provider)
}
inline ::std::string* Application::mutable_installer_provider() {
  if (!has_installer_provider()) {
    clear_provider();
    set_has_installer_provider();
    provider_.installer_provider_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:eve_launcher.application.Application.installer_provider)
  return provider_.installer_provider_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Application::release_installer_provider() {
  // @@protoc_insertion_point(field_release:eve_launcher.application.Application.installer_provider)
  if (has_installer_provider()) {
    clear_has_provider();
    return provider_.installer_provider_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Application::set_allocated_installer_provider(::std::string* installer_provider) {
  if (!has_installer_provider()) {
    provider_.installer_provider_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_provider();
  if (installer_provider != NULL) {
    set_has_installer_provider();
    provider_.installer_provider_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), installer_provider);
  }
  // @@protoc_insertion_point(field_set_allocated:eve_launcher.application.Application.installer_provider)
}

inline bool Application::has_provider() const {
  return provider_case() != PROVIDER_NOT_SET;
}
inline void Application::clear_has_provider() {
  _oneof_case_[0] = PROVIDER_NOT_SET;
}
inline Application::ProviderCase Application::provider_case() const {
  return Application::ProviderCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace application
}  // namespace eve_launcher

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::eve_launcher::application::Application_BuildType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eve_launcher::application::Application_BuildType>() {
  return ::eve_launcher::application::Application_BuildType_descriptor();
}
template <> struct is_proto_enum< ::eve_launcher::application::Application_Region> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eve_launcher::application::Application_Region>() {
  return ::eve_launcher::application::Application_Region_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_eve_5flauncher_2fapplication_2eproto
